<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!--备注：不使用nexus私服时用这个pom -->

	<!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
	<groupId>com.demo</groupId>
	<!--构件的标识符，它和group ID一起唯一标识一个构件 -->
	<artifactId>autotestddt</artifactId>
	<!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
	<version>0.0.1-SNAPSHOT</version>
	<!--项目产生的构件类型，例如jar、war、ear、pom... -->
	<packaging>jar</packaging>

	<!--项目的名称, Maven产生的文档用 -->
	<name>autotestddt</name>
	<!--项目主页的URL, Maven产生的文档用 -->
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<allure.version>2.10.0</allure.version>
		<aspectj.version>1.9.2</aspectj.version>
	</properties>

	<repositories>
		<repository>  <!-- 官网说明书显示使用第三方仓库下载sikulix的jar包 -->
			<id>com-sikulix</id>
			<name>com-sikulix</name>
			<url>https://oss.sonatype.org/content/groups/public</url>
			<layout>default</layout>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
		</repository>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>com.sikulix</groupId>
			<artifactId>sikulixapi</artifactId>
			<version>1.1.1-SNAPSHOT</version> <!-- 1.1.2及以上的版本运行用例会报错libs to export not found on above classpath: /sikulixlibs/windows/libs64 -->
			<exclusions>
				<exclusion>
					<!--去除adb依赖，adb是用于安卓程序调试用的，而且不去除的话pom保存报错Missing artifact com.github.vidstige:jadb:jar:v1.0 -->
					<groupId>com.github.vidstige</groupId>
					<artifactId>jadb</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.nativelibs4java</groupId>
			<artifactId>bridj</artifactId>
			<version>0.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-remote-driver</artifactId>
			<version>3.4.0</version>
		</dependency>
		<dependency>
			<groupId>com.codeborne</groupId>
			<artifactId>phantomjsdriver</artifactId>
			<version>1.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.9.10</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.21</version>
		</dependency>
		<dependency>
			<groupId>io.qameta.allure</groupId>
			<artifactId>allure-testng</artifactId>
			<version>${allure.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>4.1.0</version>
		</dependency>
		<dependency>
		    <groupId>commons-net</groupId>
		    <artifactId>commons-net</artifactId>
		    <version>3.6</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>autotestddt</finalName>
		<plugins>
			<!--若需要本地显示allure测试报告还需要额外配置allure和jetty的maven插件，这里不需要本地显示allure测试报告，直接用jenkins下载allure插件配置即可查看测试报告 -->
			<plugin>
				<!--maven执行测试的插件 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<!--设置maven使用独立的类加载器 -->
					<useSystemClassLoader>false</useSystemClassLoader>
					<!--设置参数命令行：解决用maven执行test时日志乱码的问题，解决maven out of memory问题，allure所需aspectj的jar包加入加载 -->
					<argLine>
						-Dfile.encoding=UTF-8 -Xms1024m -Xmx1024m
						-javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
					</argLine>
					<!--代表的是要执行的测试套件名称 -->
					<suiteXmlFiles>
						<suiteXmlFile>src/main/resources/runner/testng.xml</suiteXmlFile>
					</suiteXmlFiles>
					<!--maven工作根目录，如果不加的话则是默认根目录为项目名 -->
					<workingDirectory>target/</workingDirectory>
					<!--定义maven运行测试生成的报表路径 -->
					<reportsDirectory>target/result/maven-testng-report</reportsDirectory>
					<!--测试失败后，是否忽略并继续测试 -->
					<testFailureIgnore>true</testFailureIgnore>
					<!--生成allure-result的目录 -->
					<systemProperties>
						<property>
							<name>allure.results.directory</name>
							<value>result/allure-results</value>
						</property>
					</systemProperties>
				</configuration>
				<dependencies>
					<dependency>
						<!--allure的@Step、@Attachment注解需要正确地启用aspectj加载时编织 -->
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjweaver</artifactId>
						<version>${aspectj.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<!--控制maven项目源码jdk版本插件，maven的默认编译使用的jdk版本貌似很低 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<excludeDefaults>true</excludeDefaults>
		<plugins>
			<plugin>
				<groupId>io.qameta.allure</groupId>
				<artifactId>allure-maven</artifactId>
				<version>2.10.0</version>
				<configuration>
					<reportVersion>${allure.version}</reportVersion>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
</project>
